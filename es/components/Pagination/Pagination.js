import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { jsx as ___EmotionJSX } from "@emotion/core";
import React from 'react';
import memoize from 'lodash/memoize';
import { css } from '@emotion/core';
import { Select } from '../Select';
import { Button } from '../Button';
import { Icon } from '../Icon';
import { Text } from '../Text';
import { theme, PaginationTag, PaginationItemsTag, PaginationItemTag } from './Pagination.theme';
var VISIBLE_RANGE = 2;
var formatter = new Intl.NumberFormat('en-EN', {
  useGrouping: true,
  maximumFractionDigits: 0
});

var _ref = process.env.NODE_ENV === "production" ? {
  name: "6su6fj",
  styles: "flex-shrink:0;"
} : {
  name: "6su6fj",
  styles: "flex-shrink:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0R21CIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdsb2Rhc2gvbWVtb2l6ZSc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnLi4vU2VsZWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vVGV4dCc7XG5pbXBvcnQgeyB0aGVtZSwgUGFnaW5hdGlvblRhZywgUGFnaW5hdGlvbkl0ZW1zVGFnLCBQYWdpbmF0aW9uSXRlbVRhZyB9IGZyb20gJy4vUGFnaW5hdGlvbi50aGVtZSc7XG5cbnR5cGUgUGFnaW5hdGlvblByb3BzID0ge1xuICBwYWdlPzogbnVtYmVyLFxuICBwYWdlU2l6ZT86IG51bWJlcixcbiAgZGVmYXVsdFBhZ2U6IG51bWJlcixcbiAgZGVmYXVsdFBhZ2VTaXplOiBudW1iZXIsXG4gIHRvdGFsOiBudW1iZXIsXG4gIHNob3dTaXplQ2hhbmdlcj86IGJvb2xlYW4sXG4gIHBhZ2VTaXplT3B0aW9ucz86IG51bWJlcltdLFxuICBvbkNoYW5nZT86IChwYWdlOiBudW1iZXIsIHBhZ2VTaXplOiBudW1iZXIpID0+IGFueSxcbn07XG5cbnR5cGUgUGFnaW5hdGlvblN0YXRlID0ge1xuICBwYWdlOiBudW1iZXIsXG4gIHBhZ2VTaXplOiBudW1iZXIsXG59O1xuXG5jb25zdCBWSVNJQkxFX1JBTkdFID0gMjtcblxuY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1FTicsIHsgdXNlR3JvdXBpbmc6IHRydWUsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMCB9KTtcblxuY2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQYWdpbmF0aW9uUHJvcHMsIFBhZ2luYXRpb25TdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGRlZmF1bHRQYWdlOiAxLFxuICAgIGRlZmF1bHRQYWdlU2l6ZTogMTAsXG4gICAgdG90YWw6IDAsXG4gICAgc2hvd1NpemVDaGFuZ2VyOiBmYWxzZSxcbiAgICBwYWdlU2l6ZU9wdGlvbnM6IFsxMCwgMjAsIDMwLCA0MF0sXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFBhZ2luYXRpb25Qcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwYWdlOiBwcm9wcy5kZWZhdWx0UGFnZSxcbiAgICAgIHBhZ2VTaXplOiBwcm9wcy5kZWZhdWx0UGFnZVNpemUsXG4gICAgfTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgY3JlYXRlT25DaGFuZ2UgPSBtZW1vaXplKHBhZ2UgPT4gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHBhZ2VTaXplOiBwYWdlU2l6ZUZvcm1Qcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2VTaXplID0gcGFnZVNpemVGb3JtUHJvcHMgfHwgcGFnZVNpemVGcm9tU3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2UgfSkpO1xuXG4gICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb25DaGFuZ2UocGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfSk7XG5cbiAgb25DaGFuZ2VQYWdlU2l6ZSA9ICh2YWx1ZTogbWl4ZWQpID0+IHtcbiAgICBjb25zdCBwYWdlU2l6ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG5cbiAgICBjb25zdCB7IHRvdGFsLCBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2UgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCBuZXh0UGFnZSA9IE1hdGgubWluKHBhZ2UsIE1hdGguY2VpbCh0b3RhbCAvIHBhZ2VTaXplKSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2VTaXplLCBwYWdlOiBuZXh0UGFnZSB9KSk7XG5cbiAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvbkNoYW5nZShuZXh0UGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIGdldFBhZ2VTaXplT3B0aW9ucyA9IChwYWdlU2l6ZU9wdGlvbnM6IG51bWJlcltdKSA9PiBwYWdlU2l6ZU9wdGlvbnMubWFwKHZhbHVlID0+ICh7IHZhbHVlLCBsYWJlbDogU3RyaW5nKHZhbHVlKSB9KSk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcGFnZTogcGFnZUZyb21Qcm9wcywgcGFnZVNpemU6IHBhZ2VTaXplRm9ybVByb3BzLCB0b3RhbCwgcGFnZVNpemVPcHRpb25zID0gW10sIHNob3dTaXplQ2hhbmdlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2U6IHBhZ2VGcm9tU3RhdGUsIHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2UgPSBwYWdlRnJvbVByb3BzIHx8IHBhZ2VGcm9tU3RhdGU7XG4gICAgY29uc3QgcGFnZVNpemUgPSBwYWdlU2l6ZUZvcm1Qcm9wcyB8fCBwYWdlU2l6ZUZyb21TdGF0ZTtcblxuICAgIGNvbnN0IG51bWJlck9mUGFnZXMgPSBNYXRoLmNlaWwodG90YWwgLyBwYWdlU2l6ZSk7XG5cbiAgICBjb25zdCBsZWZ0U2lkZSA9IE1hdGgubWluKHBhZ2UgLSBWSVNJQkxFX1JBTkdFLCBudW1iZXJPZlBhZ2VzIC0gVklTSUJMRV9SQU5HRSAqIDIpO1xuICAgIGNvbnN0IHJpZ2h0U2lkZSA9IHBhZ2UgKyBWSVNJQkxFX1JBTkdFO1xuXG4gICAgY29uc3Qgc2hvd0xlZnRNb3JlID0gbGVmdFNpZGUgPiAyO1xuICAgIGNvbnN0IHNob3dSaWdodE1vcmUgPSByaWdodFNpZGUgPCBudW1iZXJPZlBhZ2VzIC0gMTtcblxuICAgIGNvbnN0IHN0YXJ0ID0gbGVmdFNpZGUgPiAxID8gbGVmdFNpZGUgOiAxO1xuXG4gICAgY29uc3QgcGFnZXMgPSBbLi4uQXJyYXkoVklTSUJMRV9SQU5HRSAqIDIgKyAxKS5rZXlzKCldLnNsaWNlKDAsIG51bWJlck9mUGFnZXMpO1xuXG4gICAgY29uc3QgZmlyc3RSZWNvcmRJbmRleCA9IChwYWdlIC0gMSkgKiBwYWdlU2l6ZSArIDE7XG4gICAgY29uc3QgbGFzdFJlY29yZEluZGV4ID0gTWF0aC5taW4odG90YWwsIHBhZ2UgKiBwYWdlU2l6ZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhZ2luYXRpb25UYWcgdGFnTmFtZT1cImRpdlwiPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlIC0gMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlIDw9IDEgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvbkxlZnRcIiBzaXplPVwieHNcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8UGFnaW5hdGlvbkl0ZW1zVGFnPlxuICAgICAgICAgIDxJZiBjb25kaXRpb249eyBsZWZ0U2lkZSA+IDEgfT5cbiAgICAgICAgICAgIDxQYWdpbmF0aW9uSXRlbVRhZyBhY3RpdmU9eyBwYWdlID09PSAxIH0gb25DbGljaz17IHRoaXMuY3JlYXRlT25DaGFuZ2UoMSkgfT5cbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuXG4gICAgICAgICAgPElmIGNvbmRpdGlvbj17IHNob3dMZWZ0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICB7IHBhZ2VzLm1hcChpbmRleCA9PiAoXG4gICAgICAgICAgICA8UGFnaW5hdGlvbkl0ZW1UYWcga2V5PXsgaW5kZXggKyBzdGFydCB9IGFjdGl2ZT17IGluZGV4ICsgc3RhcnQgPT09IHBhZ2UgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShpbmRleCArIHN0YXJ0KSB9PlxuICAgICAgICAgICAgICB7IGluZGV4ICsgc3RhcnQgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICApKSB9XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgc2hvd1JpZ2h0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgcmlnaHRTaWRlIDwgbnVtYmVyT2ZQYWdlcyB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGFjdGl2ZT17IHBhZ2UgPT09IG51bWJlck9mUGFnZXMgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShudW1iZXJPZlBhZ2VzKSB9PlxuICAgICAgICAgICAgICB7IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuICAgICAgICA8L1BhZ2luYXRpb25JdGVtc1RhZz5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlICsgMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlID49IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvblJpZ2h0XCIgc2l6ZT1cInhzXCIgLz5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPElmIGNvbmRpdGlvbj17ICEhc2hvd1NpemVDaGFuZ2VyIH0+XG4gICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgY3NzPXsgY3NzYFxuICAgICAgICAgICAgICB3aWR0aDogNjRweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gICAgICAgICAgICBgIH1cbiAgICAgICAgICAgIHZhbHVlPXsgcGFnZVNpemUgfVxuICAgICAgICAgICAgb3B0aW9ucz17IHRoaXMuZ2V0UGFnZVNpemVPcHRpb25zKHBhZ2VTaXplT3B0aW9ucykgfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyB0aGlzLm9uQ2hhbmdlUGFnZVNpemUgfVxuICAgICAgICAgICAgaXNTZWFyY2hhYmxlPXsgZmFsc2UgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSWY+XG5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTJweDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHsgZm9ybWF0dGVyLmZvcm1hdChmaXJzdFJlY29yZEluZGV4KSB9IC0geyBmb3JtYXR0ZXIuZm9ybWF0KGxhc3RSZWNvcmRJbmRleCkgfSBvZiB7IGZvcm1hdHRlci5mb3JtYXQodG90YWwpIH0gcmVjb3Jkc1xuICAgICAgICA8L1RleHQ+XG4gICAgICA8L1BhZ2luYXRpb25UYWc+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQYWdpbmF0aW9uLCB0aGVtZSB9O1xuIl19 */"
};

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "6su6fj",
  styles: "flex-shrink:0;"
} : {
  name: "6su6fj",
  styles: "flex-shrink:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEySm1CIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdsb2Rhc2gvbWVtb2l6ZSc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnLi4vU2VsZWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vVGV4dCc7XG5pbXBvcnQgeyB0aGVtZSwgUGFnaW5hdGlvblRhZywgUGFnaW5hdGlvbkl0ZW1zVGFnLCBQYWdpbmF0aW9uSXRlbVRhZyB9IGZyb20gJy4vUGFnaW5hdGlvbi50aGVtZSc7XG5cbnR5cGUgUGFnaW5hdGlvblByb3BzID0ge1xuICBwYWdlPzogbnVtYmVyLFxuICBwYWdlU2l6ZT86IG51bWJlcixcbiAgZGVmYXVsdFBhZ2U6IG51bWJlcixcbiAgZGVmYXVsdFBhZ2VTaXplOiBudW1iZXIsXG4gIHRvdGFsOiBudW1iZXIsXG4gIHNob3dTaXplQ2hhbmdlcj86IGJvb2xlYW4sXG4gIHBhZ2VTaXplT3B0aW9ucz86IG51bWJlcltdLFxuICBvbkNoYW5nZT86IChwYWdlOiBudW1iZXIsIHBhZ2VTaXplOiBudW1iZXIpID0+IGFueSxcbn07XG5cbnR5cGUgUGFnaW5hdGlvblN0YXRlID0ge1xuICBwYWdlOiBudW1iZXIsXG4gIHBhZ2VTaXplOiBudW1iZXIsXG59O1xuXG5jb25zdCBWSVNJQkxFX1JBTkdFID0gMjtcblxuY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1FTicsIHsgdXNlR3JvdXBpbmc6IHRydWUsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMCB9KTtcblxuY2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQYWdpbmF0aW9uUHJvcHMsIFBhZ2luYXRpb25TdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGRlZmF1bHRQYWdlOiAxLFxuICAgIGRlZmF1bHRQYWdlU2l6ZTogMTAsXG4gICAgdG90YWw6IDAsXG4gICAgc2hvd1NpemVDaGFuZ2VyOiBmYWxzZSxcbiAgICBwYWdlU2l6ZU9wdGlvbnM6IFsxMCwgMjAsIDMwLCA0MF0sXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFBhZ2luYXRpb25Qcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwYWdlOiBwcm9wcy5kZWZhdWx0UGFnZSxcbiAgICAgIHBhZ2VTaXplOiBwcm9wcy5kZWZhdWx0UGFnZVNpemUsXG4gICAgfTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgY3JlYXRlT25DaGFuZ2UgPSBtZW1vaXplKHBhZ2UgPT4gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHBhZ2VTaXplOiBwYWdlU2l6ZUZvcm1Qcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2VTaXplID0gcGFnZVNpemVGb3JtUHJvcHMgfHwgcGFnZVNpemVGcm9tU3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2UgfSkpO1xuXG4gICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb25DaGFuZ2UocGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfSk7XG5cbiAgb25DaGFuZ2VQYWdlU2l6ZSA9ICh2YWx1ZTogbWl4ZWQpID0+IHtcbiAgICBjb25zdCBwYWdlU2l6ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG5cbiAgICBjb25zdCB7IHRvdGFsLCBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2UgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCBuZXh0UGFnZSA9IE1hdGgubWluKHBhZ2UsIE1hdGguY2VpbCh0b3RhbCAvIHBhZ2VTaXplKSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2VTaXplLCBwYWdlOiBuZXh0UGFnZSB9KSk7XG5cbiAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvbkNoYW5nZShuZXh0UGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIGdldFBhZ2VTaXplT3B0aW9ucyA9IChwYWdlU2l6ZU9wdGlvbnM6IG51bWJlcltdKSA9PiBwYWdlU2l6ZU9wdGlvbnMubWFwKHZhbHVlID0+ICh7IHZhbHVlLCBsYWJlbDogU3RyaW5nKHZhbHVlKSB9KSk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcGFnZTogcGFnZUZyb21Qcm9wcywgcGFnZVNpemU6IHBhZ2VTaXplRm9ybVByb3BzLCB0b3RhbCwgcGFnZVNpemVPcHRpb25zID0gW10sIHNob3dTaXplQ2hhbmdlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2U6IHBhZ2VGcm9tU3RhdGUsIHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2UgPSBwYWdlRnJvbVByb3BzIHx8IHBhZ2VGcm9tU3RhdGU7XG4gICAgY29uc3QgcGFnZVNpemUgPSBwYWdlU2l6ZUZvcm1Qcm9wcyB8fCBwYWdlU2l6ZUZyb21TdGF0ZTtcblxuICAgIGNvbnN0IG51bWJlck9mUGFnZXMgPSBNYXRoLmNlaWwodG90YWwgLyBwYWdlU2l6ZSk7XG5cbiAgICBjb25zdCBsZWZ0U2lkZSA9IE1hdGgubWluKHBhZ2UgLSBWSVNJQkxFX1JBTkdFLCBudW1iZXJPZlBhZ2VzIC0gVklTSUJMRV9SQU5HRSAqIDIpO1xuICAgIGNvbnN0IHJpZ2h0U2lkZSA9IHBhZ2UgKyBWSVNJQkxFX1JBTkdFO1xuXG4gICAgY29uc3Qgc2hvd0xlZnRNb3JlID0gbGVmdFNpZGUgPiAyO1xuICAgIGNvbnN0IHNob3dSaWdodE1vcmUgPSByaWdodFNpZGUgPCBudW1iZXJPZlBhZ2VzIC0gMTtcblxuICAgIGNvbnN0IHN0YXJ0ID0gbGVmdFNpZGUgPiAxID8gbGVmdFNpZGUgOiAxO1xuXG4gICAgY29uc3QgcGFnZXMgPSBbLi4uQXJyYXkoVklTSUJMRV9SQU5HRSAqIDIgKyAxKS5rZXlzKCldLnNsaWNlKDAsIG51bWJlck9mUGFnZXMpO1xuXG4gICAgY29uc3QgZmlyc3RSZWNvcmRJbmRleCA9IChwYWdlIC0gMSkgKiBwYWdlU2l6ZSArIDE7XG4gICAgY29uc3QgbGFzdFJlY29yZEluZGV4ID0gTWF0aC5taW4odG90YWwsIHBhZ2UgKiBwYWdlU2l6ZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhZ2luYXRpb25UYWcgdGFnTmFtZT1cImRpdlwiPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlIC0gMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlIDw9IDEgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvbkxlZnRcIiBzaXplPVwieHNcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8UGFnaW5hdGlvbkl0ZW1zVGFnPlxuICAgICAgICAgIDxJZiBjb25kaXRpb249eyBsZWZ0U2lkZSA+IDEgfT5cbiAgICAgICAgICAgIDxQYWdpbmF0aW9uSXRlbVRhZyBhY3RpdmU9eyBwYWdlID09PSAxIH0gb25DbGljaz17IHRoaXMuY3JlYXRlT25DaGFuZ2UoMSkgfT5cbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuXG4gICAgICAgICAgPElmIGNvbmRpdGlvbj17IHNob3dMZWZ0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICB7IHBhZ2VzLm1hcChpbmRleCA9PiAoXG4gICAgICAgICAgICA8UGFnaW5hdGlvbkl0ZW1UYWcga2V5PXsgaW5kZXggKyBzdGFydCB9IGFjdGl2ZT17IGluZGV4ICsgc3RhcnQgPT09IHBhZ2UgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShpbmRleCArIHN0YXJ0KSB9PlxuICAgICAgICAgICAgICB7IGluZGV4ICsgc3RhcnQgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICApKSB9XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgc2hvd1JpZ2h0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgcmlnaHRTaWRlIDwgbnVtYmVyT2ZQYWdlcyB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGFjdGl2ZT17IHBhZ2UgPT09IG51bWJlck9mUGFnZXMgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShudW1iZXJPZlBhZ2VzKSB9PlxuICAgICAgICAgICAgICB7IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuICAgICAgICA8L1BhZ2luYXRpb25JdGVtc1RhZz5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlICsgMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlID49IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvblJpZ2h0XCIgc2l6ZT1cInhzXCIgLz5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPElmIGNvbmRpdGlvbj17ICEhc2hvd1NpemVDaGFuZ2VyIH0+XG4gICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgY3NzPXsgY3NzYFxuICAgICAgICAgICAgICB3aWR0aDogNjRweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gICAgICAgICAgICBgIH1cbiAgICAgICAgICAgIHZhbHVlPXsgcGFnZVNpemUgfVxuICAgICAgICAgICAgb3B0aW9ucz17IHRoaXMuZ2V0UGFnZVNpemVPcHRpb25zKHBhZ2VTaXplT3B0aW9ucykgfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyB0aGlzLm9uQ2hhbmdlUGFnZVNpemUgfVxuICAgICAgICAgICAgaXNTZWFyY2hhYmxlPXsgZmFsc2UgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSWY+XG5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTJweDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHsgZm9ybWF0dGVyLmZvcm1hdChmaXJzdFJlY29yZEluZGV4KSB9IC0geyBmb3JtYXR0ZXIuZm9ybWF0KGxhc3RSZWNvcmRJbmRleCkgfSBvZiB7IGZvcm1hdHRlci5mb3JtYXQodG90YWwpIH0gcmVjb3Jkc1xuICAgICAgICA8L1RleHQ+XG4gICAgICA8L1BhZ2luYXRpb25UYWc+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQYWdpbmF0aW9uLCB0aGVtZSB9O1xuIl19 */"
};

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "1ljvac",
  styles: "width:64px;margin-left:12px;"
} : {
  name: "1ljvac",
  styles: "width:64px;margin-left:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwS3FCIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdsb2Rhc2gvbWVtb2l6ZSc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnLi4vU2VsZWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vVGV4dCc7XG5pbXBvcnQgeyB0aGVtZSwgUGFnaW5hdGlvblRhZywgUGFnaW5hdGlvbkl0ZW1zVGFnLCBQYWdpbmF0aW9uSXRlbVRhZyB9IGZyb20gJy4vUGFnaW5hdGlvbi50aGVtZSc7XG5cbnR5cGUgUGFnaW5hdGlvblByb3BzID0ge1xuICBwYWdlPzogbnVtYmVyLFxuICBwYWdlU2l6ZT86IG51bWJlcixcbiAgZGVmYXVsdFBhZ2U6IG51bWJlcixcbiAgZGVmYXVsdFBhZ2VTaXplOiBudW1iZXIsXG4gIHRvdGFsOiBudW1iZXIsXG4gIHNob3dTaXplQ2hhbmdlcj86IGJvb2xlYW4sXG4gIHBhZ2VTaXplT3B0aW9ucz86IG51bWJlcltdLFxuICBvbkNoYW5nZT86IChwYWdlOiBudW1iZXIsIHBhZ2VTaXplOiBudW1iZXIpID0+IGFueSxcbn07XG5cbnR5cGUgUGFnaW5hdGlvblN0YXRlID0ge1xuICBwYWdlOiBudW1iZXIsXG4gIHBhZ2VTaXplOiBudW1iZXIsXG59O1xuXG5jb25zdCBWSVNJQkxFX1JBTkdFID0gMjtcblxuY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1FTicsIHsgdXNlR3JvdXBpbmc6IHRydWUsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMCB9KTtcblxuY2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQYWdpbmF0aW9uUHJvcHMsIFBhZ2luYXRpb25TdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGRlZmF1bHRQYWdlOiAxLFxuICAgIGRlZmF1bHRQYWdlU2l6ZTogMTAsXG4gICAgdG90YWw6IDAsXG4gICAgc2hvd1NpemVDaGFuZ2VyOiBmYWxzZSxcbiAgICBwYWdlU2l6ZU9wdGlvbnM6IFsxMCwgMjAsIDMwLCA0MF0sXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFBhZ2luYXRpb25Qcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwYWdlOiBwcm9wcy5kZWZhdWx0UGFnZSxcbiAgICAgIHBhZ2VTaXplOiBwcm9wcy5kZWZhdWx0UGFnZVNpemUsXG4gICAgfTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgY3JlYXRlT25DaGFuZ2UgPSBtZW1vaXplKHBhZ2UgPT4gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHBhZ2VTaXplOiBwYWdlU2l6ZUZvcm1Qcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2VTaXplID0gcGFnZVNpemVGb3JtUHJvcHMgfHwgcGFnZVNpemVGcm9tU3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2UgfSkpO1xuXG4gICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb25DaGFuZ2UocGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfSk7XG5cbiAgb25DaGFuZ2VQYWdlU2l6ZSA9ICh2YWx1ZTogbWl4ZWQpID0+IHtcbiAgICBjb25zdCBwYWdlU2l6ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG5cbiAgICBjb25zdCB7IHRvdGFsLCBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2UgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCBuZXh0UGFnZSA9IE1hdGgubWluKHBhZ2UsIE1hdGguY2VpbCh0b3RhbCAvIHBhZ2VTaXplKSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2VTaXplLCBwYWdlOiBuZXh0UGFnZSB9KSk7XG5cbiAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvbkNoYW5nZShuZXh0UGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIGdldFBhZ2VTaXplT3B0aW9ucyA9IChwYWdlU2l6ZU9wdGlvbnM6IG51bWJlcltdKSA9PiBwYWdlU2l6ZU9wdGlvbnMubWFwKHZhbHVlID0+ICh7IHZhbHVlLCBsYWJlbDogU3RyaW5nKHZhbHVlKSB9KSk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcGFnZTogcGFnZUZyb21Qcm9wcywgcGFnZVNpemU6IHBhZ2VTaXplRm9ybVByb3BzLCB0b3RhbCwgcGFnZVNpemVPcHRpb25zID0gW10sIHNob3dTaXplQ2hhbmdlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2U6IHBhZ2VGcm9tU3RhdGUsIHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2UgPSBwYWdlRnJvbVByb3BzIHx8IHBhZ2VGcm9tU3RhdGU7XG4gICAgY29uc3QgcGFnZVNpemUgPSBwYWdlU2l6ZUZvcm1Qcm9wcyB8fCBwYWdlU2l6ZUZyb21TdGF0ZTtcblxuICAgIGNvbnN0IG51bWJlck9mUGFnZXMgPSBNYXRoLmNlaWwodG90YWwgLyBwYWdlU2l6ZSk7XG5cbiAgICBjb25zdCBsZWZ0U2lkZSA9IE1hdGgubWluKHBhZ2UgLSBWSVNJQkxFX1JBTkdFLCBudW1iZXJPZlBhZ2VzIC0gVklTSUJMRV9SQU5HRSAqIDIpO1xuICAgIGNvbnN0IHJpZ2h0U2lkZSA9IHBhZ2UgKyBWSVNJQkxFX1JBTkdFO1xuXG4gICAgY29uc3Qgc2hvd0xlZnRNb3JlID0gbGVmdFNpZGUgPiAyO1xuICAgIGNvbnN0IHNob3dSaWdodE1vcmUgPSByaWdodFNpZGUgPCBudW1iZXJPZlBhZ2VzIC0gMTtcblxuICAgIGNvbnN0IHN0YXJ0ID0gbGVmdFNpZGUgPiAxID8gbGVmdFNpZGUgOiAxO1xuXG4gICAgY29uc3QgcGFnZXMgPSBbLi4uQXJyYXkoVklTSUJMRV9SQU5HRSAqIDIgKyAxKS5rZXlzKCldLnNsaWNlKDAsIG51bWJlck9mUGFnZXMpO1xuXG4gICAgY29uc3QgZmlyc3RSZWNvcmRJbmRleCA9IChwYWdlIC0gMSkgKiBwYWdlU2l6ZSArIDE7XG4gICAgY29uc3QgbGFzdFJlY29yZEluZGV4ID0gTWF0aC5taW4odG90YWwsIHBhZ2UgKiBwYWdlU2l6ZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhZ2luYXRpb25UYWcgdGFnTmFtZT1cImRpdlwiPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlIC0gMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlIDw9IDEgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvbkxlZnRcIiBzaXplPVwieHNcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8UGFnaW5hdGlvbkl0ZW1zVGFnPlxuICAgICAgICAgIDxJZiBjb25kaXRpb249eyBsZWZ0U2lkZSA+IDEgfT5cbiAgICAgICAgICAgIDxQYWdpbmF0aW9uSXRlbVRhZyBhY3RpdmU9eyBwYWdlID09PSAxIH0gb25DbGljaz17IHRoaXMuY3JlYXRlT25DaGFuZ2UoMSkgfT5cbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuXG4gICAgICAgICAgPElmIGNvbmRpdGlvbj17IHNob3dMZWZ0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICB7IHBhZ2VzLm1hcChpbmRleCA9PiAoXG4gICAgICAgICAgICA8UGFnaW5hdGlvbkl0ZW1UYWcga2V5PXsgaW5kZXggKyBzdGFydCB9IGFjdGl2ZT17IGluZGV4ICsgc3RhcnQgPT09IHBhZ2UgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShpbmRleCArIHN0YXJ0KSB9PlxuICAgICAgICAgICAgICB7IGluZGV4ICsgc3RhcnQgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICApKSB9XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgc2hvd1JpZ2h0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgcmlnaHRTaWRlIDwgbnVtYmVyT2ZQYWdlcyB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGFjdGl2ZT17IHBhZ2UgPT09IG51bWJlck9mUGFnZXMgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShudW1iZXJPZlBhZ2VzKSB9PlxuICAgICAgICAgICAgICB7IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuICAgICAgICA8L1BhZ2luYXRpb25JdGVtc1RhZz5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlICsgMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlID49IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvblJpZ2h0XCIgc2l6ZT1cInhzXCIgLz5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPElmIGNvbmRpdGlvbj17ICEhc2hvd1NpemVDaGFuZ2VyIH0+XG4gICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgY3NzPXsgY3NzYFxuICAgICAgICAgICAgICB3aWR0aDogNjRweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gICAgICAgICAgICBgIH1cbiAgICAgICAgICAgIHZhbHVlPXsgcGFnZVNpemUgfVxuICAgICAgICAgICAgb3B0aW9ucz17IHRoaXMuZ2V0UGFnZVNpemVPcHRpb25zKHBhZ2VTaXplT3B0aW9ucykgfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyB0aGlzLm9uQ2hhbmdlUGFnZVNpemUgfVxuICAgICAgICAgICAgaXNTZWFyY2hhYmxlPXsgZmFsc2UgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSWY+XG5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTJweDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHsgZm9ybWF0dGVyLmZvcm1hdChmaXJzdFJlY29yZEluZGV4KSB9IC0geyBmb3JtYXR0ZXIuZm9ybWF0KGxhc3RSZWNvcmRJbmRleCkgfSBvZiB7IGZvcm1hdHRlci5mb3JtYXQodG90YWwpIH0gcmVjb3Jkc1xuICAgICAgICA8L1RleHQ+XG4gICAgICA8L1BhZ2luYXRpb25UYWc+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQYWdpbmF0aW9uLCB0aGVtZSB9O1xuIl19 */"
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "1qhmto6",
  styles: "margin-left:12px;"
} : {
  name: "1qhmto6",
  styles: "margin-left:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzTG1CIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdsb2Rhc2gvbWVtb2l6ZSc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnLi4vU2VsZWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vVGV4dCc7XG5pbXBvcnQgeyB0aGVtZSwgUGFnaW5hdGlvblRhZywgUGFnaW5hdGlvbkl0ZW1zVGFnLCBQYWdpbmF0aW9uSXRlbVRhZyB9IGZyb20gJy4vUGFnaW5hdGlvbi50aGVtZSc7XG5cbnR5cGUgUGFnaW5hdGlvblByb3BzID0ge1xuICBwYWdlPzogbnVtYmVyLFxuICBwYWdlU2l6ZT86IG51bWJlcixcbiAgZGVmYXVsdFBhZ2U6IG51bWJlcixcbiAgZGVmYXVsdFBhZ2VTaXplOiBudW1iZXIsXG4gIHRvdGFsOiBudW1iZXIsXG4gIHNob3dTaXplQ2hhbmdlcj86IGJvb2xlYW4sXG4gIHBhZ2VTaXplT3B0aW9ucz86IG51bWJlcltdLFxuICBvbkNoYW5nZT86IChwYWdlOiBudW1iZXIsIHBhZ2VTaXplOiBudW1iZXIpID0+IGFueSxcbn07XG5cbnR5cGUgUGFnaW5hdGlvblN0YXRlID0ge1xuICBwYWdlOiBudW1iZXIsXG4gIHBhZ2VTaXplOiBudW1iZXIsXG59O1xuXG5jb25zdCBWSVNJQkxFX1JBTkdFID0gMjtcblxuY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1FTicsIHsgdXNlR3JvdXBpbmc6IHRydWUsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMCB9KTtcblxuY2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQYWdpbmF0aW9uUHJvcHMsIFBhZ2luYXRpb25TdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGRlZmF1bHRQYWdlOiAxLFxuICAgIGRlZmF1bHRQYWdlU2l6ZTogMTAsXG4gICAgdG90YWw6IDAsXG4gICAgc2hvd1NpemVDaGFuZ2VyOiBmYWxzZSxcbiAgICBwYWdlU2l6ZU9wdGlvbnM6IFsxMCwgMjAsIDMwLCA0MF0sXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFBhZ2luYXRpb25Qcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwYWdlOiBwcm9wcy5kZWZhdWx0UGFnZSxcbiAgICAgIHBhZ2VTaXplOiBwcm9wcy5kZWZhdWx0UGFnZVNpemUsXG4gICAgfTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgY3JlYXRlT25DaGFuZ2UgPSBtZW1vaXplKHBhZ2UgPT4gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHBhZ2VTaXplOiBwYWdlU2l6ZUZvcm1Qcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2VTaXplID0gcGFnZVNpemVGb3JtUHJvcHMgfHwgcGFnZVNpemVGcm9tU3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2UgfSkpO1xuXG4gICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb25DaGFuZ2UocGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfSk7XG5cbiAgb25DaGFuZ2VQYWdlU2l6ZSA9ICh2YWx1ZTogbWl4ZWQpID0+IHtcbiAgICBjb25zdCBwYWdlU2l6ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG5cbiAgICBjb25zdCB7IHRvdGFsLCBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2UgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCBuZXh0UGFnZSA9IE1hdGgubWluKHBhZ2UsIE1hdGguY2VpbCh0b3RhbCAvIHBhZ2VTaXplKSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHBhZ2VTaXplLCBwYWdlOiBuZXh0UGFnZSB9KSk7XG5cbiAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvbkNoYW5nZShuZXh0UGFnZSwgcGFnZVNpemUpO1xuICAgIH1cbiAgfTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIGdldFBhZ2VTaXplT3B0aW9ucyA9IChwYWdlU2l6ZU9wdGlvbnM6IG51bWJlcltdKSA9PiBwYWdlU2l6ZU9wdGlvbnMubWFwKHZhbHVlID0+ICh7IHZhbHVlLCBsYWJlbDogU3RyaW5nKHZhbHVlKSB9KSk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcGFnZTogcGFnZUZyb21Qcm9wcywgcGFnZVNpemU6IHBhZ2VTaXplRm9ybVByb3BzLCB0b3RhbCwgcGFnZVNpemVPcHRpb25zID0gW10sIHNob3dTaXplQ2hhbmdlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBhZ2U6IHBhZ2VGcm9tU3RhdGUsIHBhZ2VTaXplOiBwYWdlU2l6ZUZyb21TdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHBhZ2UgPSBwYWdlRnJvbVByb3BzIHx8IHBhZ2VGcm9tU3RhdGU7XG4gICAgY29uc3QgcGFnZVNpemUgPSBwYWdlU2l6ZUZvcm1Qcm9wcyB8fCBwYWdlU2l6ZUZyb21TdGF0ZTtcblxuICAgIGNvbnN0IG51bWJlck9mUGFnZXMgPSBNYXRoLmNlaWwodG90YWwgLyBwYWdlU2l6ZSk7XG5cbiAgICBjb25zdCBsZWZ0U2lkZSA9IE1hdGgubWluKHBhZ2UgLSBWSVNJQkxFX1JBTkdFLCBudW1iZXJPZlBhZ2VzIC0gVklTSUJMRV9SQU5HRSAqIDIpO1xuICAgIGNvbnN0IHJpZ2h0U2lkZSA9IHBhZ2UgKyBWSVNJQkxFX1JBTkdFO1xuXG4gICAgY29uc3Qgc2hvd0xlZnRNb3JlID0gbGVmdFNpZGUgPiAyO1xuICAgIGNvbnN0IHNob3dSaWdodE1vcmUgPSByaWdodFNpZGUgPCBudW1iZXJPZlBhZ2VzIC0gMTtcblxuICAgIGNvbnN0IHN0YXJ0ID0gbGVmdFNpZGUgPiAxID8gbGVmdFNpZGUgOiAxO1xuXG4gICAgY29uc3QgcGFnZXMgPSBbLi4uQXJyYXkoVklTSUJMRV9SQU5HRSAqIDIgKyAxKS5rZXlzKCldLnNsaWNlKDAsIG51bWJlck9mUGFnZXMpO1xuXG4gICAgY29uc3QgZmlyc3RSZWNvcmRJbmRleCA9IChwYWdlIC0gMSkgKiBwYWdlU2l6ZSArIDE7XG4gICAgY29uc3QgbGFzdFJlY29yZEluZGV4ID0gTWF0aC5taW4odG90YWwsIHBhZ2UgKiBwYWdlU2l6ZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhZ2luYXRpb25UYWcgdGFnTmFtZT1cImRpdlwiPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlIC0gMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlIDw9IDEgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvbkxlZnRcIiBzaXplPVwieHNcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8UGFnaW5hdGlvbkl0ZW1zVGFnPlxuICAgICAgICAgIDxJZiBjb25kaXRpb249eyBsZWZ0U2lkZSA+IDEgfT5cbiAgICAgICAgICAgIDxQYWdpbmF0aW9uSXRlbVRhZyBhY3RpdmU9eyBwYWdlID09PSAxIH0gb25DbGljaz17IHRoaXMuY3JlYXRlT25DaGFuZ2UoMSkgfT5cbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuXG4gICAgICAgICAgPElmIGNvbmRpdGlvbj17IHNob3dMZWZ0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICB7IHBhZ2VzLm1hcChpbmRleCA9PiAoXG4gICAgICAgICAgICA8UGFnaW5hdGlvbkl0ZW1UYWcga2V5PXsgaW5kZXggKyBzdGFydCB9IGFjdGl2ZT17IGluZGV4ICsgc3RhcnQgPT09IHBhZ2UgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShpbmRleCArIHN0YXJ0KSB9PlxuICAgICAgICAgICAgICB7IGluZGV4ICsgc3RhcnQgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICApKSB9XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgc2hvd1JpZ2h0TW9yZSB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGRpc2FibGVkPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiTW9yZVwiIC8+XG4gICAgICAgICAgICA8L1BhZ2luYXRpb25JdGVtVGFnPlxuICAgICAgICAgIDwvSWY+XG5cbiAgICAgICAgICA8SWYgY29uZGl0aW9uPXsgcmlnaHRTaWRlIDwgbnVtYmVyT2ZQYWdlcyB9PlxuICAgICAgICAgICAgPFBhZ2luYXRpb25JdGVtVGFnIGFjdGl2ZT17IHBhZ2UgPT09IG51bWJlck9mUGFnZXMgfSBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShudW1iZXJPZlBhZ2VzKSB9PlxuICAgICAgICAgICAgICB7IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uSXRlbVRhZz5cbiAgICAgICAgICA8L0lmPlxuICAgICAgICA8L1BhZ2luYXRpb25JdGVtc1RhZz5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5jcmVhdGVPbkNoYW5nZShwYWdlICsgMSkgfVxuICAgICAgICAgIGNvbG9yPVwibmV1dHJhbFwiXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBzcXVhcmVkXG4gICAgICAgICAgZGlzYWJsZWQ9eyBwYWdlID49IG51bWJlck9mUGFnZXMgfVxuICAgICAgICAgIHdpdGhJY29uQXV0b3NpemU9eyBmYWxzZSB9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwiQ2hldnJvblJpZ2h0XCIgc2l6ZT1cInhzXCIgLz5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPElmIGNvbmRpdGlvbj17ICEhc2hvd1NpemVDaGFuZ2VyIH0+XG4gICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgY3NzPXsgY3NzYFxuICAgICAgICAgICAgICB3aWR0aDogNjRweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gICAgICAgICAgICBgIH1cbiAgICAgICAgICAgIHZhbHVlPXsgcGFnZVNpemUgfVxuICAgICAgICAgICAgb3B0aW9ucz17IHRoaXMuZ2V0UGFnZVNpemVPcHRpb25zKHBhZ2VTaXplT3B0aW9ucykgfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyB0aGlzLm9uQ2hhbmdlUGFnZVNpemUgfVxuICAgICAgICAgICAgaXNTZWFyY2hhYmxlPXsgZmFsc2UgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSWY+XG5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBjc3M9eyBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTJweDtcbiAgICAgICAgICBgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHsgZm9ybWF0dGVyLmZvcm1hdChmaXJzdFJlY29yZEluZGV4KSB9IC0geyBmb3JtYXR0ZXIuZm9ybWF0KGxhc3RSZWNvcmRJbmRleCkgfSBvZiB7IGZvcm1hdHRlci5mb3JtYXQodG90YWwpIH0gcmVjb3Jkc1xuICAgICAgICA8L1RleHQ+XG4gICAgICA8L1BhZ2luYXRpb25UYWc+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQYWdpbmF0aW9uLCB0aGVtZSB9O1xuIl19 */"
};

var Pagination =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Pagination, _React$Component);

  function Pagination(props) {
    var _this;

    _classCallCheck(this, Pagination);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pagination).call(this, props));
    _this.createOnChange = memoize(function (page) {
      return function () {
        var _this$props = _this.props,
            onChange = _this$props.onChange,
            pageSizeFormProps = _this$props.pageSize;
        var pageSizeFromState = _this.state.pageSize;
        var pageSize = pageSizeFormProps || pageSizeFromState;

        _this.setState(function () {
          return {
            page: page
          };
        });

        if (typeof onChange === 'function') {
          onChange(page, pageSize);
        }
      };
    });

    _this.onChangePageSize = function (value) {
      var pageSize = parseInt(value, 10);
      var _this$props2 = _this.props,
          total = _this$props2.total,
          onChange = _this$props2.onChange;
      var page = _this.state.page;
      var nextPage = Math.min(page, Math.ceil(total / pageSize));

      _this.setState(function () {
        return {
          pageSize: pageSize,
          page: nextPage
        };
      });

      if (typeof onChange === 'function') {
        onChange(nextPage, pageSize);
      }
    };

    _this.getPageSizeOptions = function (pageSizeOptions) {
      return pageSizeOptions.map(function (value) {
        return {
          value: value,
          label: String(value)
        };
      });
    };

    _this.state = {
      page: props.defaultPage,
      pageSize: props.defaultPageSize
    };
    return _this;
  } // $FlowFixMe


  _createClass(Pagination, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          pageFromProps = _this$props3.page,
          pageSizeFormProps = _this$props3.pageSize,
          total = _this$props3.total,
          _this$props3$pageSize = _this$props3.pageSizeOptions,
          pageSizeOptions = _this$props3$pageSize === void 0 ? [] : _this$props3$pageSize,
          showSizeChanger = _this$props3.showSizeChanger;
      var _this$state = this.state,
          pageFromState = _this$state.page,
          pageSizeFromState = _this$state.pageSize;
      var page = pageFromProps || pageFromState;
      var pageSize = pageSizeFormProps || pageSizeFromState;
      var numberOfPages = Math.ceil(total / pageSize);
      var leftSide = Math.min(page - VISIBLE_RANGE, numberOfPages - VISIBLE_RANGE * 2);
      var rightSide = page + VISIBLE_RANGE;
      var showLeftMore = leftSide > 2;
      var showRightMore = rightSide < numberOfPages - 1;
      var start = leftSide > 1 ? leftSide : 1;

      var pages = _toConsumableArray(Array(VISIBLE_RANGE * 2 + 1).keys()).slice(0, numberOfPages);

      var firstRecordIndex = (page - 1) * pageSize + 1;
      var lastRecordIndex = Math.min(total, page * pageSize);
      return ___EmotionJSX(PaginationTag, {
        tagName: "div"
      }, ___EmotionJSX(Button, {
        size: "sm",
        css: _ref,
        onClick: this.createOnChange(page - 1),
        color: "neutral",
        variant: "outlined",
        squared: true,
        disabled: page <= 1,
        withIconAutosize: false
      }, ___EmotionJSX(Icon, {
        name: "ChevronLeft",
        size: "xs"
      })), ___EmotionJSX(PaginationItemsTag, null, leftSide > 1 ? ___EmotionJSX(PaginationItemTag, {
        active: page === 1,
        onClick: this.createOnChange(1)
      }, "1") : null, showLeftMore ? ___EmotionJSX(PaginationItemTag, {
        disabled: true
      }, ___EmotionJSX(Icon, {
        name: "More"
      })) : null, pages.map(function (index) {
        return ___EmotionJSX(PaginationItemTag, {
          key: index + start,
          active: index + start === page,
          onClick: _this2.createOnChange(index + start)
        }, index + start);
      }), showRightMore ? ___EmotionJSX(PaginationItemTag, {
        disabled: true
      }, ___EmotionJSX(Icon, {
        name: "More"
      })) : null, rightSide < numberOfPages ? ___EmotionJSX(PaginationItemTag, {
        active: page === numberOfPages,
        onClick: this.createOnChange(numberOfPages)
      }, numberOfPages) : null), ___EmotionJSX(Button, {
        size: "sm",
        css: _ref2,
        onClick: this.createOnChange(page + 1),
        color: "neutral",
        variant: "outlined",
        squared: true,
        disabled: page >= numberOfPages,
        withIconAutosize: false
      }, ___EmotionJSX(Icon, {
        name: "ChevronRight",
        size: "xs"
      })), !!showSizeChanger ? ___EmotionJSX(Select, {
        css: _ref3,
        value: pageSize,
        options: this.getPageSizeOptions(pageSizeOptions),
        onChange: this.onChangePageSize,
        isSearchable: false
      }) : null, ___EmotionJSX(Text, {
        css: _ref4
      }, formatter.format(firstRecordIndex), " - ", formatter.format(lastRecordIndex), " of ", formatter.format(total), " records"));
    }
  }]);

  return Pagination;
}(React.Component);

Pagination.defaultProps = {
  defaultPage: 1,
  defaultPageSize: 10,
  total: 0,
  showSizeChanger: false,
  pageSizeOptions: [10, 20, 30, 40]
};
export { Pagination, theme };